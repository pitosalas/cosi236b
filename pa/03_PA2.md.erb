---
title: PA2 - Programming Assignment 2
type: page
copyright: Tim Hickey
---
You are to extend your <%= link_to_pa :PA1 %> to include a prediction method that will predict the rating a user would give to a movie and you are to run some tests to determine how accurate your method is.

    Note: After using this a few times, I think there are slightly better ways to organize
the classes. You are welcome to either follow these instructions exactly or to come up with a 'better' design.

You should implement two classes: MovieData  and MovieTest with the following specifications:

MovieData has a constructor that takes a path to the folder containing the movie data (ml-100k for example) a second optional constructor can be used to specify that a particular base/training set pair should be read. 

For example,
<%= ruby_string ' z = MovieData.new("ml-100k")' %>
  
will read it all of the data in the 100,000 lines in "u.data" as the training set and will have an empty test set, while
<%= ruby_string " z = MovieData.new('ml-100k',:u1) " %>
will read in the 80,000 lines in "u1.base" as the training set and the 20,000 lines in "u1.test" as the test set.

MovieData also has several instance methods

* z.rating(u,m)  returns the rating that user u gave movie m in the training set, and 0 if user u did not rate movie m
* z.predict(u,m) returns a floating point number between 1.0 and 5.0 as an estimate of what user u would rate movie m
* z.movies(u) returns the array of movies that user u has watched
* z.viewers(m) returns the array of users that have seen movie m
* z.run_test(k) runs the z.predict method on the first k ratings in the test set and returns a MovieTest object containing the results.
  * The parameter k is optional and if omitted, all of the tests will be run.

MovieTest is generated by the z.run_test(k) and it stores a list of all of the results, where each result is a tuple containing the user, movie, rating, and the predicted rating. 

The MovieTest object also has several instance methods:

* t.mean  returns the average predication error (which should be close to zero)
* t.stddev returns the standard deviation of the error
* t.rms returns the root mean square error of the prediction
* t.to_a returns an array of the predictions in the form [u,m,r,p]. You can also generate other types of error measures if you want, but we will rely mostly on the root mean square error.

You should write comments for each of the methods of your two classes and use Rdoc to generate HTML documentation for the two classes. Put the documentation folder and the two classes in a folder called PA2, and upload PA2 to github.

##### What to hand in.

<%= deliverable "A blog post with the following components" %>

  * The Algorithm. A description of your prediction algorithm and what you think are its advantages and drawbacks. 
  * The Analysis. A description of the result of running some experiments to determine the accuracy of your method (using the z.run_test(k) method and the MovieTest methods.
  * Benchmarking. An estimate of the time it takes run each prediction (determined by using Time.now to capture the current clock time before and after making k predictions) and an explanation of what you think will happen to that time if you increase the size of the training set by a factor of 10 or 100....
  * Connection to your Incubator Project. A description of the kind of data your webapp could collect and the kinds of predictions it could make (if you wanted to do so....)

<%= deliverable "Comments on at least four of your fellow student's blog posts." %>

<%= deliverable "The code for your classes in movie_data.rb and movie_test.rb uploaded to github in a folder called PA2" %>

<%= deliverable "A short screen recording showing you using irb to load the ml-100k folder into MovieData, run some tests of the instance methods, generate a MovieTest data with 10 rows from the testing set, and running the instance methods of the MovieTest object. " %>

<%= deliverable "A link of the result of submitting your code to code climate" %>

<%= important %> This will take a few hours but don't spend too much time trying to get a super accurate prediction algorithm.  There are several published papers on this subject and the goal here is just to give you some practice writing useful Ruby code and the let you think about big data for your own applications....  If you want to create a really good prediction algorithm.  First complete this PA2 with a really simple predictor and get everything done.  Then go back and refine the algorithm, but only if you don't have more important projects to work on!  This is a really fun kind of project to work on, especially once you start getting the hang of writing ruby code to implement sophisticated algorithms.  We'll discuss some very simple algorithms in class...
