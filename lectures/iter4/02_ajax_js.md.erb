---
title: AJAX and friends
---
<%= homework_hdr %>
* What are a few ways to use Ajax in your product? While there are some obious ones, see if you can come up with one or two imaginative, innovative, and yet not crazy impossible applications of Ajax. <%= deliverable "Piazza post with your proposals." %>
* Reflect personally on what you have learned in this course about yourself. And reflect about how this course has affected the way you are professionally. Please avoid platitudes. Here are some questions to help you think about it: 

  What latent interests have been reinforced? What did you discover you were not so interested in? What have you learned about the work you want to do in the future? BGased on your interests and your strenghts? Do you have more clarity there? Where do you know you want to learn a lot more? 

  You may either post to piazza or if you want an email to Pito and Amin if it allows you to be more open. <%= deliverable "Two to Four paragraph personal reflection" %>

#### Background
* Ajax:
  * Used to stand for "Asynchronous Javascript and XML"
  * Nowadays the term has gotten generic -- XML is rarely involved, JSON is used instead
  * If it means anything it means updating a page without a visible refresh
  * Unobtrusive Javascript: [Why is Unobtrusive Javascript Important?](http://blog.teamtreehouse.com/unobtrusive-javascript-important)
* Responsive Design
  * Single web site for all devices (web browser vs. mobile)
  * Layout changes (radically) if needed to accommodate screen size
  * Radically means: rearranging components, and even dropping content altogether
  * You've seen this so much, it's more or less expected now
  * Famous example [Boston Globe](www.bostonglobe.com)

##### Use Cases
* **Asynchronous update**: page changes without the user doing anything
* **Typeahead**: suggested completions added to a textbox while typing
* **Delayed Rendering**: Result from a query comes in gradually
* **In Place Editing**: Forms that allow in place editing (instead of a big submit button)
* **Server Push**: Browser update initiated by the server!

##### How Ajax works
* Steps
  1. Browser makes a 'background' http request 
  1. Server (i.e. the controller) returns 'data'
  1. Browser based code (javascript) interprets that data
  1. Browser changes DOM which changes what is displayed in the current page

#### Deeper dive

##### <%= bold_red "Javascript is a serious and very important langauge" %>

* It might be the most important language right now
  * Why?
  * Has nothing to do with Java!
  * Name is strictly political (back in the 80's I think)
* Browser DOM :: HTML :: CSS :: JavaScript are interlocking partners that work together
* Document Object Model
  * DOM is a strictly a tree with the <html></html> at the top of the tree, assigned to variable `document`.
  * Each tree element is a node. Every node has exactly one parent
  * The DOM tree can be modified AT RUN TIME
  * Any change to the DOM tree is immediately reflected in the visual appearance of the page!

`Let's look at some code:` Github: [Ajax Demo](https://github.com/pitosalas/ajaxdemo)

##### Ajax basics in Rails
* Unobtrusive Javascript
* Uses JQuery
* Ties js to erbs and the views

`Let's look at some code:` Github: [Form Demo](https://github.com/pitosalas/formdemo)

##### Server Push
* Not a real term :)
* Many different ways of approaching. Sort of immature right now
* Key techniques are:
  * Periodic background polling by browser
  * WebSockets and variants which maintain an open connection to server
* Some links to study further:
  * [Pusher Service - free push](http://pusher.com)
  * [Websockets on Heroku](https://devcenter.heroku.com/articles/ruby-websockets)

`Let's look at some code:` Github: [Form Demo](https://github.com/pitosalas/formdemo)


#### References
* [Javascript Coding Conventions](http://javascript.crockford.com/code.html)
